#DEFINITIONS:  -*-sh-*-
#

Arts2{

INCLUDE "general.arts"
INCLUDE "agendas.arts"

# Agenda for scalar gas absorption calculation
Copy(abs_xsec_agenda, abs_xsec_agenda__noCIA)

IndexCreate( ilast )


IndexSet( stokes_dim, 1 )
AtmosphereSet1D
jacobianOff
cloudboxOff
NumericSet( ppath_lmax, 5e3 )

# A dummy frequency grid
VectorSet( f_grid, [10e9] )


Tensor3Create( vmr_field3 )
MatrixCreate( vmr_field2 )
MatrixCreate( t_field2 )
VectorCreate( t_field1 )
StringCreate( outfile )
StringCreate( str )
AgendaSet( forloop_agenda ){
  NumericSet(refr_index_air, 0)
  NumericSet(refr_index_air_group, 0)

  Tensor3ExtractFromTensor4(vmr_field3, vmr_field, forloop_index, "page")
  MatrixExtractFromTensor3(vmr_field2, vmr_field3, 0, "row")
  VectorExtractFromMatrix(rtp_vmr, vmr_field2, 0, "column")

  MatrixExtractFromTensor3(t_field2, t_field, forloop_index, "page")
  VectorExtractFromMatrix(t_field1, t_field2, 0, "row")
  Extract(rtp_temperature, t_field1, 0)

  Extract(rtp_pressure, p_grid, forloop_index)

  refr_index_airMicrowavesGeneral(refr_index_air, refr_index_air_group,
              rtp_pressure, rtp_temperature, rtp_vmr, abs_species )

  StringSet(str, "refindexair")
  Append(str, outfile)
  WriteXMLIndexed("ascii", forloop_index, refr_index_air, str, 3)
}


#####
# CASE A: Earth
#####

# Main atmospheric contributors
#  When comparing effects of planetary composition, we don't want further
#  confusion by H2O. so we leave it out here.
abs_speciesSet( species=[
"C2H2",
"C2H6",
"CH3Cl",
"CH4",
"CO",
"CO2",
"COF2",
"ClO",
"H2CO",
"H2O",
"H2O2",
"HBr",
"HCN",
"HCl",
"HF",
"HI",
"HNO3",
"HOCl",
"N2",
"N2O",
"NH3",
"NO",
"NO2",
"O2",
"O3",
"OH",
"PH3",
"SF6",
"SO2"
])

VectorNLogSpace( p_grid, 100, 1100e2, 0.1 )

AtmRawRead( basename = "planets/Earth/Fascod/tropical/tropical" )
AtmFieldsCalc

atmfields_checkedCalc

nelemGet( ilast, p_grid )
IndexStepDown( ilast, ilast )
StringSet(outfile, ".Earth")
WriteXML("ascii", p_grid, "p_grid.Earth.xml")
WriteXML("ascii", t_field, "t_field.Earth.xml")
ForLoop( forloop_agenda, 0, ilast, 1  )
#####
# CASE B: Mars
#####

# Main atmospheric contributors
abs_speciesSet( species=[
"CH4",
"CO",
"CO2",
"H2",
"H2O",
"H2O2",
"H2S",
"HCl",
"N2",
"NO2",
"O",
"O2",
"O3",
"OCS",
"OH",
"SO2"
])

VectorNLogSpace( p_grid, 100, 766, 0.1 )

AtmRawRead( basename = "planets/Mars/MPS/Mars.Ls0.day.dust-medium/Mars.Ls0.day.dust-medium.sol-avg/Mars.Ls0.day.dust-medium.sol-avg" )
AtmFieldsCalc
Extract( z_surface, z_field, 0 )

atmfields_checkedCalc

nelemGet( ilast, p_grid )
IndexStepDown( ilast, ilast )
StringSet(outfile, ".Mars")
WriteXML("ascii", p_grid, "p_grid.Mars.xml")
WriteXML("ascii", t_field, "t_field.Mars.xml")
ForLoop( forloop_agenda, 0, ilast, 1  )


#####
# CASE C: Venus
#####

# Main atmospheric contributors
abs_speciesSet( species=[
"CO",
"CO2",
"H2O",
"H2SO4",
"HCl",
"HF",
"N2",
"NO",
"NO2",
"O",
"O2",
"O3",
"OCS",
"SO",
"SO2"
])

VectorNLogSpace( p_grid, 100, 9.2e6, 0.1 )

AtmRawRead( basename = "planets/Venus/MPS/Venus.vira.day/Venus.vira.day" )
AtmFieldsCalc( vmr_zeropadding=1 )
Extract( z_surface, z_field, 0 )

atmfields_checkedCalc( bad_partition_functions_ok = 1 )

nelemGet( ilast, p_grid )
IndexStepDown( ilast, ilast )
StringSet(outfile, ".Venus")
WriteXML("ascii", p_grid, "p_grid.Venus.xml")
WriteXML("ascii", t_field, "t_field.Venus.xml")
ForLoop( forloop_agenda, 0, ilast, 1  )


#####
# CASE D: Jupiter
#####

# Main atmospheric contributors
#abs_speciesSet( species=["CO2","H2","He"] )
abs_speciesSet( species=[
"C2H2",
"C2H4",
"C2H6",
"C3H8",
"CH4",
"CO",
"CO2",
"H2",
"H2O",
"H2S",
"HCN",
"He",
"NH3",
"PH3"
])


# Pressure grid rougly matching 0 to 80 km.
VectorNLogSpace( p_grid, 100, 1.0e6, 0.1 )

AtmRawRead( basename = "planets/Jupiter/MPS/Jupiter.mean/Jupiter.mean" )
AtmFieldsCalc( vmr_zeropadding=1 )
Extract( z_surface, z_field, 0 )

atmfields_checkedCalc( bad_partition_functions_ok = 1 )

nelemGet( ilast, p_grid )
IndexStepDown( ilast, ilast )
StringSet(outfile, ".Jupiter")
WriteXML("ascii", p_grid, "p_grid.Jupiter.xml")
WriteXML("ascii", t_field, "t_field.Jupiter.xml")
ForLoop( forloop_agenda, 0, ilast, 1  )

}
